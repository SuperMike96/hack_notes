一、背景

系统管理员经常需要SSH 或者telent 远程登录到Linux 服务器，经常运行一些需要很长时间才能完成的任务，
比如系统备份、ftp 传输等等。通常情况下我们都是为每一个这样的任务开一个远程终端窗口，因为它们执行的时间太长了。
必须等待它们执行完毕，在此期间不能关掉窗口或者断开连接，否则这个任务就会被杀掉，一切半途而废了。


二、简介
GNU Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。

GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。
会话恢复

只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，
用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，
也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。

多窗口

在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。

会话共享

Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。

三、常用screen参数

screen -S yourname -> 新建一个叫yourname的session
screen -ls -> 列出当前所有的session
screen -r yourname -> 回到yourname这个session
screen -d yourname -> 远程detach某个session
screen -d -r yourname -> 结束当前session并回到yourname这个session


安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：

[root@TS-DEV ~]# screen -S david 
screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：

[root@TS-DEV ~]# screen vi david.txt
screen创建一个执行vi david.txt的单窗口会话，退出vi 将退出该窗口/会话。

之后我们想暂时退出做点别的事情，比如出去散散步，那么在screen窗口键入C-a d，Screen会给出detached提示：

暂时中断会话

[root@TS-DEV ~]# screen -ls

重新连接会话：

[root@TS-DEV ~]# screen -r 12865


结束一个session

1、使用screen名字，kill掉。

      screen -S session_name -X quit

或者


有两种方法

一种是，通过screen -r pid 或者 screen -r name先进入该session中，然后exit即可

一种是，通过screen -S edm_10000 -X quit命令，不进入该session中，直接退出


当然也可以直接 kill pid的方式结束一个session，

killall screen 结束所有的session会话


3、结束多个session

如果你的系统里有多个session同时在运行，有没有办法全部退出呢？

当然，你可以一个一个的session退出，只是麻烦了一点。


我们也可以通过组合命令，一次全部退出


screen -ls | grep -i detached | cut -d. -f1 | tr -d [:blank:]| xargs kill

screen -ls | grep Detached | cut -d. -f1 | awk ‘{print $1}’ | xargs kill

如果您的pid都是五位数的话

screen -ls | grep -o "[0-9]\{5\}" | xargs kill


这两行命令的意思都差不多，通过管道，找到每个session的pid，然后作为 kill的参数，直接杀掉该进程

screen -ls ： 列出所有的screen session

grep Detached ： 过滤出Detached的session

cut -d. -f1 ：用.分割，取第一部分，也就是 pid

awk和tr都是去掉前面的空白符的

xargs ：就是把每一行作为 kill 的参数执行



